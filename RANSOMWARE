# Template for Yara Rules

import "pe"
import "hash"
import "math"
import "cuckoo"

rule <Rule_Name> 
{
    meta:
        description = "<Brief description of what this rule detects>"
        author = "<Your Name or Team Name>"
        date = "<YYYY-MM-DD>"
        version = "1.0"
        hash = "<Specific file hash if applicable>"
        reference = "<External references such as CVEs, reports, or articles>"
        malware_family = "<Malware family or strain>"
        severity = "<Low, Medium, High>"
        target_system = "<Windows, Linux, MacOS, etc.>"
    
    strings:
        // ASCII or hex strings related to malware indicators
        $string_1 = "<Relevant string or ASCII pattern>"
        $string_2 = "<Another string pattern or byte sequence>"
        $hex_pattern_1 = { E8 ?? ?? ?? ?? 8B F8 85 C0 74 18 8B }  // Example: Hex pattern

        // Optional: Specific filenames, paths, or URLs used by the malware
        $file_name_1 = "ransom_note.txt" ascii
        $file_name_2 = "/malicious/file/path" ascii

        // Optional: C2 (Command and Control) server URLs, IPs, or domains
        $c2_ip = "192.168.1.100" ascii
        $c2_domain = "malicious-domain.com" ascii

        // Optional: Registry keys, process names, or mutexes (for Windows malware)
        $registry_key = "HKEY_LOCAL_MACHINE\\Software\\Malware" ascii
        $mutex_name = "Global\\MaliciousMutex" ascii

    condition:
        // PE file conditions (only applicable to Windows executables)
        uint16(0) == 0x5A4D and        // PE file header check
        filesize < 10MB and            // Optional: File size limit

        // String or hex pattern match conditions
        (any of ($string_*) or any of ($hex_pattern_*) or any of ($file_name_*)) and
        
        // Optional: Check for C2 server communication strings
        (all of ($c2_*)) or

        // Optional: Check if certain strings exist together
        ( $string_1 and $file_name_1 )

        // Optional: Check hashes for known samples
        hash.md5(0, filesize) == "d41d8cd98f00b204e9800998ecf8427e" or
        hash.sha1(0, filesize) == "aee6801792d67607f228be8cec8291f9"

        // Optional: PE import analysis
        pe.imports("kernel32.dll", "CreateFile") and
        pe.number_of_sections > 5

        // Optional: Advanced math or entropy checks (for packed malware)
        math.entropy(0, filesize) > 7.0

        // Optional: Cuckoo Sandbox results (if using dynamic analysis)
        cuckoo.network.http_request(/malicious-url.com/) or
        cuckoo.network.dns_request(/malicious-domain.com/)
}
